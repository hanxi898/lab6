% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brute_force_knapsack.R
\name{brute_force_knapsack}
\alias{brute_force_knapsack}
\title{Brute Force Knapsack Solver}
\usage{
brute_force_knapsack(x, W, parallel = TRUE)
}
\arguments{
\item{x}{A data frame with two columns: \code{w} for item weights and \code{v} for item values.}

\item{W}{An integer representing the maximum weight capacity of the knapsack.}

\item{parallel}{Logical. If TRUE, enables parallel computation (default is FALSE).}
}
\value{
A list with two components:
\itemize{
\item \code{value}: The maximum value of items that can be carried without exceeding the weight.
\item \code{elements}: A vector of indices representing the selected items.
}
}
\description{
This function solves the knapsack problem using a brute force approach.
It checks all possible combinations of items and returns the one with the highest value
without exceeding the weight limit.
}
\examples{
generate_knapsack_objects <- function(n) {
knapsack_objects <- data.frame(
w = sample(1:4000, size = n, replace = TRUE),
v = runif(n = n, 0, 10000)
)
return(knapsack_objects)
}
knapsack_objects <- generate_knapsack_objects(8)
brute_force_knapsack(knapsack_objects, W = 3500)

}
